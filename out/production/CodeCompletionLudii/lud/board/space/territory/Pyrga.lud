(define "SetupHands"
    (start
        {
        (place "Disc1" (handSite P1 0))
        (place "Disc1" (handSite P1 1))
        (place "Disc1" (handSite P1 2))
        (place "Disc1" (handSite P1 3))
        (place "Disc1" (handSite P1 4))
        (place "Square1" (handSite P1 5))
        (place "Square1" (handSite P1 6))
        (place "Square1" (handSite P1 7))
        (place "Square1" (handSite P1 8))
        (place "Square1" (handSite P1 9))
        (place "Triangle1" (handSite P1 10))
        (place "Triangle1" (handSite P1 11))
        (place "Triangle1" (handSite P1 12))
        (place "Triangle1" (handSite P1 13))
        (place "Triangle1" (handSite P1 14))
        
        (place "Disc2" (handSite P2 0))
        (place "Disc2" (handSite P2 1))
        (place "Disc2" (handSite P2 2))
        (place "Disc2" (handSite P2 3))
        (place "Disc2" (handSite P2 4))
        (place "Square2" (handSite P2 5))
        (place "Square2" (handSite P2 6))
        (place "Square2" (handSite P2 7))
        (place "Square2" (handSite P2 8))
        (place "Square2" (handSite P2 9))
        (place "Triangle2" (handSite P2 10))
        (place "Triangle2" (handSite P2 11))
        (place "Triangle2" (handSite P2 12))
        (place "Triangle2" (handSite P2 13))
        (place "Triangle2" (handSite P2 14))
        }
))

(define "LastWas" (= (where Level #1 Mover at:(last To)) (topLevel at:(last To))))

(define "RotatePieceThenSetRestrictions"
    (or
        {
        // Square Pieces, if Applicable
        (if
            <Square:wasPlacedAndCanRotate>
            (move Set Rotation
                (to (last To))
                <Square:rotation>
                previous:False 
                next:False
                (then 
                    (if
                        (= 0 (rotation at:(last To) level:(topLevel at:(last To))))
                        (forEach Site
                            (sites Around (last To) Orthogonal)
                            (set Pending (site))
                        )
                        (forEach Site
                            (sites Around (last To) Diagonal)
                            (set Pending (site))
                        )
        ))))
        
        // Triangular Pieces
        (if
            ("LastWas" "Triangle")
            (do
                (move Set Rotation
                    (to (last To)) 
                    {0 2 4 6} 
                    previous:False 
                    next:False
                )
                ifAfterwards:("TriangleRestrictsABoardSite")    
                (then
                    (and
                        (forEach Site
                            (sites Distance (step Forward (to (sites Board))) from:(last To) <TriangleAhead:typeA>)  
                            (set Pending (site))
                        )
                        (forEach Site
                            <TriangleTails:typeB>
                            (set Pending (site))
        )))))
        }
))

(define "IfNoRotationsSetRestrictions"
    (if
        (or
            {
            ("LastWas" "Triangle")
            <Square:wasPlacedAndCanRotate>
            }
        )  
        (moveAgain)
        (if
            ("LastWas" "Disc")
            (set Pending (last To))
            (forEach Site
                (sites Around (last To) <Square:orientation> )
                (set Pending (site))
))))

(define "ToSitesAllowedFor"
    (to
        (sites Pending)
        if:(and
            {
            (> 3 (count Stack at:(to)))
            (> 0 (where Level #1 Mover at:(to)))
            (> 0 (where Level #1 Next  at:(to)))
            (< 0 (count Pieces Mover #1 in:(sites Hand Mover)))
            }
)))

(define "FromHand" 
    (then (remove (min (array (forEach (sites Hand Mover) if:(= (id #1 Mover) (what at:(site))))))))
)

//------------------------------------------------------------
(game "Pyrga"
    (players 2)
    (equipment
        {
        (board (square 4) use:Cell)
        (hand Each size:15)
        (piece "Disc" Each maxState:1)
        (piece "Square" Each maxState:2)
        (piece "Triangle" Each maxState:4)
        }
    )
    (rules
        ("SetupHands")
        (play
            (if
                (is Prev Mover)
                "RotatePieceThenSetRestrictions"    
                (priority
                    (or
                        { // Restrict moves to the pending sites
                        (move Add
                            (piece (id "Disc" Mover)) 
                            ("ToSitesAllowedFor" "Disc") 
                            stack:True 
                            ("FromHand" "Disc")
                        )
                        (move Add
                            (piece (id "Triangle" Mover)) 
                            ("ToSitesAllowedFor" "Triangle") 
                            stack:True 
                            ("FromHand" "Triangle")
                        )
                        (move Add
                            (piece (id "Square" Mover)) 
                            ("ToSitesAllowedFor" "Square") 
                            stack:True 
                            ("FromHand" "Square")
                        )
                        }
                    )
                    (or
                        { // If no pending sites place to any empty site
                        (move Add
                            (piece (id "Disc" Mover)) 
                            (to (sites Empty) if:(< 0 (count Pieces Mover "Disc" in:(sites Hand Mover)))) 
                            stack:True 
                            ("FromHand" "Disc")
                        )
                        (move Add
                            (piece (id "Triangle" Mover)) 
                            (to (sites Empty) if:(< 0 (count Pieces Mover "Triangle" in:(sites Hand Mover)))) 
                            stack:True 
                            ("FromHand" "Triangle")
                        )
                        (move Add
                            (piece (id "Square" Mover)) 
                            (to (sites Empty) if:(< 0 (count Pieces Mover "Square" in:(sites Hand Mover)))) 
                            stack:True 
                            ("FromHand" "Square")
                        )
                        }
                    )
                    (then 
                        ("IfNoRotationsSetRestrictions")
                ))
                (then 
                    (and
                        {
                        (<Scoring:majorityOrTop> (mover))
                        (<Scoring:majorityOrTop> (next))
                        }
        ))))
        (end
            (if
                (or
                    {
                    (>= (score Mover) 300 )
                    (>= (score Next) 300 )
                    (no Moves Next)
                    }
                )
                (byScore)
))))

// -------------------
// Scoring
(define "UpdateScoreOfMajority"
    (set Score (player #1) 0
        (then
            (forEach Site
                (sites Board) 
                (if
                    (>
                        (+
                            {
                            (if (= #1 (who at:(site) level:0)) 1 0)
                            (if (= #1 (who at:(site) level:1)) 1 0)
                            (if (= #1 (who at:(site) level:2)) 1 0)
                            }
                        )
                        (/ (+ 1 (topLevel at:(site))) 2)
                    )
                    (addScore (player #1) (^ 10 (topLevel at:(site))))  
)))))

(define "UpdateScoreOfTop"
    (set Score (player #1) 0
        (then
            (forEach Site
                (sites Board)
                (if
                    (= #1 (who at:(site)))
                    (addScore (player #1) (^ 10 (topLevel at:(site)))) 
)))))

//-----------------------------------------
//Other defines for Options

(define "TriangleRestrictsABoardSite"
    (!= 0
        (count Sites
            in:(union
                (sites Distance (step Forward (to (sites Board))) from:(last To) <TriangleAhead:typeA>)
                <TriangleTails:typeB>
))))

(define "NoTails"
    (sites {})
)

(define "RayTails"
    (union
        (sites Distance (step (directions { BR }) (to (sites Board))) from:(last To) #1 ) 
        (sites Distance (step (directions { BL }) (to (sites Board))) from:(last To) #1 ) 
))

(define "AdjacentTails"
    (sites To (leap (from (last To)) {{R F R F} {L F L F}} rotations:False (to (sites Board))))
)

(define "NonAdjacentTails"
    (sites To (leap (from (last To)) {{R F F R F F} {L F F L F F} {R F F F R F F F} {L F F F L F F F}} rotations:False (to (sites Board))))
) 

//----------------------------
// Options

(option "Scoring" <Scoring> args:{ <majorityOrTop> }
    {
    (item "Majority Control" <"UpdateScoreOfMajority"> "Stack is owned by player with majority of pieces there.")*** 
    (item "Top Control" <"UpdateScoreOfTop"> "Stack is owned by player with piece on top.")  // my mis-reading - but reduces the connection between material on board and control. - more chaotic?
    }
) 
(option "Square Influence" <Square> args:{ <rotation> <wasPlacedAndCanRotate> <orientation> }
    {
    (item "Orthogonally only" <{0}> <False> <Orthogonal> "Square is placed othogonally - next piece goes on adjacent spaces.")**
    (item "Diagonally only" <{1}> <False> <Diagonal> "Square is placed diagonally - next piece goes on diagonally adjacent spaces.")
    (item "Choice" <{0 1}> <("LastWas" "Square")> <All> "Square may be placed Either way")
    }
) 

(option "Triangle Ahead" <TriangleAhead> args:{ <typeA> }
    {
    (item "Any distance" <(range 1 Infinity)> "Next piece may be placed any distance ahead of triangle")**
    (item "Adjacent only" <(exact 1)>  "Next piece may be placed directly in front of triangle")
    (item "At distance 2 only" <(exact 2)>  "Next piece may be placed directly in front of triangle")
    (item "Non-adjacent only" <(range 2 Infinity)> "Next piece may be placed at least 2 ahead of triangle")
    }
)

(option "Triangle Tails" <TriangleTails> args:{ <typeB> }
    {
    (item "No tail placements" <"NoTails"> "but may not be placed around its tails.")**
    (item "Diagonal ray" <("RayTails" (range 1 Infinity))>  "and-or may be placed diagonally from the tails.")**
    (item "Diagonal adjacent" <("RayTails" (exact 1))> "and-or may be placed diagonally adjacent to the tails.")
    (item "Diagonal ray, non-adjacent" <("RayTails" (range 2 Infinity))> "and-or may be placed diagonally from the tails, but not adjacent.")*
    }
)  

//----------------------------

(metadata
    (info
        {
        (description "Pyrga is a 2 player abstract 4x4 square stacking game with a limited supply of 5 each of 3 types of pieces per player. 
            There is no movement, nor capture. 
            Shapes and their orientation restrict the locations of the subsequent placements.
            Stacks ownership is by majority. 
            Duplicate shapes are not allowed in the same stack. 
            Goal is ownership of 3 complete stacks, or if not possible, ownership of the majority of the tallest non-tied stacks
        Draws are possible.")
    (rules
        "White starts by playing any piece on any space.
        Players take turns to play one of their pieces.
        Each space of the board can support only one Tower. Each Tower is made of one piece of each kind (Square, Triangle, Circle), and pieces may be played in any order.
        If the active player cannot play according to the last piece's rule, they may play on any empty space.
        A Tower is controlled by the player with the most pieces.
        
        SQUARES
        The opponent must play in an orthogonally adjacent space.
        
        TRIANGLES
        The active player selects the orientation, it must point to at least one space.
        The opponent must play in the line indicated by the Triangle.
        
        CIRCLES
        The opponent must play on the same space.
        
        SCORES: The scores show the column counts. For example: 211 means 2 Towers, 1 controlled pair and 1 singleton
        
        GAME END
        The first player to control 3 completed Towers wins (i.e. a score of 300+).
    If the active player has no possible moves the game ends with tiebreaks: most completed towers, or most two-piece towers, or most one-piece towers.")
    (id "1964")
    (source "<a href=\"https://boardgamegeek.com/boardgame/305723/pyrga\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />BGG</a>")
    (version "1.3.3")
    (classification "board/space/territory")
    (author "Mathias Daval")
    (publisher "<a href=\"http://www.argyxgames.com/pyrga\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Argyx Games</a>")
    (credit "Dale W. Walton")
    (date "2014")
    }
)

(graphics
    {
    (player Colour P2 (colour DarkRed))
    (player Colour P1 (colour Cream))
    (piece Scale "Disc" scaleX:.85 scaleY:.85)
    (piece Scale "Square"  scaleX:.75 scaleY:.75)
    (piece Scale "Triangle" scaleX:.9 scaleY:.9)
    
    (hand Placement P2 scale:.8 offsetX:0.95 offsetY:0.10 vertical:True)
    (hand Placement P1 scale:.8 offsetX:0.05 offsetY:0.10 vertical:True)
    }
)
(ai (heuristics (score weight:2)))
)
